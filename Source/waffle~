
#lang racket

(require racket/file)
(require racket/include)
(require racket/date)	
#;(require net/sendurl)
(require racket/cmdline)
(require racket/format)

(define-namespace-anchor a)
(define ns (namespace-anchor->namespace a))
 
(define loglevel 1)
(define mode 'new)
(define ops '())
(define root #f)

(define (evaluate-step step)
   (match step
     [(list 'waffle) ; i.e., "(waffle)" (no arguments)
      (waffle)]
     [else
      (error (format "How do I evaluate this step? ~a" step))]))

(define (get p l)
  (list-ref l p))

(define (to-string s)
  (~v s)) 

(define (cut str position)
  (substring str 0 position))

(define (printstr input)
  (displayln input))

(define (islist l)
  (list? l))

(define (isnumber i)
  (number? i))

(define (ispair p)
  (pair? p))

(define (first list)
  (car list))

(define (isstring v)
  (string? v))

(define (read)
  (read-line (current-input-port) 'any))

(define (rand n)
  (random n))

(define (add n . n2)
  (+ n (apply + n2)))

(define (subtract n . n2)
  (- n (apply + n2)))

(define (multiply n . n2)
  (* n (apply + n2)))

(define (waffle)
  (display "
          ___________
         |__|__|__|__|
         |__|__|__|__|
         |__|__|__|__|
         |__|__|__|__|
         |__|__|__|__|
      ")) 

(define (is-empty list)
  (empty? list))

(define (show-ascii ascii)
  (display ascii))

(define (max-value list)
  (apply max list))

(define (conj s . s2)
  (string-append s (string-join s2 "")))

(define (at-location n list)
  (list-ref list n))

(define (var name value)
      
          (namespace-set-variable-value! (string->symbol name) value))

(define (double n)
  (+ n n))

(define (half n)
  (/ n 2))

#;(define (open-website str)
         (send-url str))

(define (quarter n)
  (/ n 4))

(define (str-length str)
  (string-length str))

(define (list-length lst (acc 0)) 
   (if (null? lst)
       acc
       (list-length (cdr lst) (+ 1 acc))))

(define (divide n n2)
  (/ n n2))

(define (flip list)
  (reverse list))

(define (combine . f)
  (print (string-join (map symbol->string (cons f) " "))))
  ;;(compose (filter (lambda (x) (pair? x)) f)))
  
(define (fn name f)
  (namespace-set-variable-value! (string->symbol name) f))

(define (square n)
  (* n n))

(define pi 3.14159265359)

; command line 

(command-line
 #:multi
 [("-v" "--verbose")    "more verbose"      (set! loglevel (add1 loglevel))]
 [("-q" "--quiet")      "be quiet"          (set! loglevel 0)]
 #:once-any
 [("-i" "--in-place")   "edit in-place"     (set! mode 'in-place)]
 [("-c" "--create-new") "create a new file" (set! mode 'new)]
 [("-n" "--dry-run")    "do nothing"        (set! mode #f)]
 #:once-each
 [("-d" "--directory") dir "work in a given directory" (set! root dir)]
 #:help-labels "operations to perform:"
 #:multi
 [("+l" "++line") "add a line"    (set! ops `(,@ops "add"))]
 [("-l" "--line") "delete a line" (set! ops `(,@ops "delete"))]
 [("-e" "--edit") "edit a line"   (set! ops `(,@ops "edit"))]
 #:args (file)

 ; eval program

 (define program (cons 'begin (file->list file)))

 (eval program ns))

